{"version":3,"sources":["output_box.js","listen_button.js","App.js","index.js"],"names":["TextArea","Input","OutputBox","className","rows","placeholder","value","this","props","spoken_text","React","Component","recognizer","window","SpeechRecognition","webkitSpeechRecognition","continuous","ListenButton","state","listening","output_text","button_type","toggleListen","bind","handleListen","setState","start","stop","onstart","console","log","onend","finalTranscript","onresult","event","i","resultIndex","results","length","transcript","isFinal","type","shape","size","icon","AudioFilled","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAIQA,EAAaC,IAAbD,SAYOE,E,4JATb,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,cAACH,EAAD,CAAUI,KAAM,EAAGC,YAAY,iCAAiCC,MAAOC,KAAKC,MAAMC,oB,GAJlEC,IAAMC,WCCxBC,EAAa,IADKC,OAAOC,mBAAqBD,OAAOE,yBAE3DH,EAAWI,YAAa,E,IA+DTC,E,kDA5Db,aAAe,IAAD,8BACZ,gBACKC,MAAS,CACZC,WAAW,EACXC,YAAa,GACbC,YAAY,WAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARR,E,gDAWd,WACEhB,KAAKkB,SAAS,CACZJ,YAAad,KAAKW,MAAMC,UAAY,UAAY,SAChDA,WAAYZ,KAAKW,MAAMC,WACtBZ,KAAKiB,gB,0BAGV,WAAgB,IAAD,OACTjB,KAAKW,MAAMC,WACbZ,KAAKkB,SAAS,CACZL,YAAa,KAEfR,EAAWc,SAGXd,EAAWe,OAGbf,EAAWgB,QAAU,WACnBC,QAAQC,IAAI,iBAGdlB,EAAWmB,MAAQ,WACjBF,QAAQC,IAAI,sBAGd,IAAIE,EAAkB,GACtBpB,EAAWqB,SAAW,SAAAC,GACpB,IAAK,IAAIC,EAAID,EAAME,YAAaD,EAAID,EAAMG,QAAQC,OAAQH,IAAK,CAC7D,IAAMI,EAAaL,EAAMG,QAAQF,GAAG,GAAGI,WACnCL,EAAMG,QAAQF,GAAGK,UAASR,GAAmBO,EAAa,KAEhE,EAAKd,SAAS,CACZL,YAAaY,O,oBAKnB,WACE,OACE,qCACA,qBAAK7B,UAAU,SAAf,SACA,cAAC,IAAD,CAAQsC,KAAMlC,KAAKW,MAAMG,YAAaqB,MAAM,SAASC,KAAK,QAAQC,KAAM,cAACC,EAAA,EAAD,IAAiBC,QAASvC,KAAKe,iBAEvG,cAAC,EAAD,CAAWb,YAAaF,KAAKW,MAAME,qB,GAxDdV,IAAMC,W,MCIlBoC,MAXf,WACE,OACE,gCACA,qBAAK5C,UAAU,QAAf,SACE,oDAAsB,uBAAtB,UAAsC,uBAAtC,uBAEF,cAAC,EAAD,QCLJ6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.adf895be.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\nimport \"antd/dist/antd.css\";\n\nconst { TextArea } = Input;\n\nclass OutputBox extends React.Component { \n  render() {\n    return (\n      <div className=\"output\">\n        <TextArea rows={6} placeholder=\"Speak to get your text here...\" value={this.props.spoken_text} />\n      </div>\n    );\n  }\n}\n\nexport default OutputBox;","import React from 'react';\nimport  { Button } from 'antd';\nimport { AudioFilled } from '@ant-design/icons';\nimport \"antd/dist/antd.css\";\nimport OutputBox from './output_box.js';\n\nvar SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\nconst recognizer = new SpeechRecognition()\nrecognizer.continuous = true;\n\nclass ListenButton extends React.Component {\n  constructor() {\n    super();\n    this.state =  {\n      listening: false,\n      output_text: \"\",\n      button_type:\"primary\"\n    }\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n  }\n\n  toggleListen() {\n    this.setState({\n      button_type: this.state.listening ? \"primary\" : \"danger\",\n      listening: !this.state.listening,\n    }, this.handleListen)\n  }\n\n  handleListen() {\n    if (this.state.listening) {\n      this.setState({\n        output_text: \"\"\n      })\n      recognizer.start()\n      // recognizer.onend = () => recognizer.start()\n    } else {\n      recognizer.stop()\n    }\n\n    recognizer.onstart = () => {\n      console.log(\"Listening...\")\n    }\n    \n    recognizer.onend = () => {\n      console.log('Done listening...')\n    }\n\n    let finalTranscript = ''\n    recognizer.onresult = event => {\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n      }\n      this.setState({\n        output_text: finalTranscript\n      })\n  }\n}\n\n  render () {\n    return (\n      <>\n      <div className=\"listen\">\n      <Button type={this.state.button_type} shape=\"circle\" size=\"large\" icon={<AudioFilled />} onClick={this.toggleListen} />\n      </div>\n      <OutputBox spoken_text={this.state.output_text} />\n      </>\n    );\n  }\n}\nexport default ListenButton;","import ListenButton from './listen_button.js';\nimport './style.css';\n\nfunction App() {\n  return (\n    <div>\n    <div className=\"about\">\n      <span> Click mic icon <br></br> Speak <br></br> Get your text </span>\n    </div>\n    <ListenButton />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}